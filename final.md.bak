## IDベース鍵共有システムの実用性の検討

白勢研究室  
1012104 吉田 努  
2016/2/4  

<style type="text/css">
	.reveal table {
		font-size: 80%;
	}
</style>

<style type="text/css">
.reveal section img {
  margin: 15px 0px;
  border: 0px;
  box-shadow: 0 0 0px rgba(0, 0, 0, 0);
}
</style>

---
## 背景
- 共通鍵暗号方式
- 公開鍵暗号方式
##  

### ペアリングを利用した暗号方式<!-- .element: class="fragment"-->

<!--
## 共通鍵暗号方式
- 暗号化と復号の鍵が同じ
- 基本的にこの暗号方式で暗号化を行う
- 比較的高速
<center>![Block](/home/b1012104/Pictures/Study/presentation/key2.png)</center>

## 代表例
- AES
- 3DES  
など

## 公開鍵暗号方式
- 暗号化と復号に用いる鍵が異なる
- 鍵配送問題の解決
- 認証や電子署名などの応用
- 比較的低速
<center>![Block](/home/b1012104/Pictures/Study/presentation/pkc.png)</center>

## 代表例
- RSA暗号
- エルガマル暗号
- <span style="color:red">楕円曲線暗号</span>  
など

## 暗号のまとめ

| 種類       ||共通鍵暗号方式|公開鍵暗号方式|ペアリング暗号方式|
|:-----------||:------------:|:------------:|:----------------:|
| 用途       ||暗号化・復号  |特殊          |特殊              |
| 処理速度   ||高速          |低速          |低速              |
-->


---
## ペアリングの前に

---
## 楕円曲線
<center>![Block](/home/b1012104/tex/gradrepo/midterm/ec.png)</center>
### $y^2 = ax^3 + bx + c$

--
## 楕円曲線の加算
<center>![Block](/home/b1012104/tex/gradrepo/final/ecadd.png)</center>
### $P\ +\ Q\ =\ R$

--
## 楕円曲線のスカラー倍
- 点      : $P$
- スカラー: $l$
- $lP\ =\ \underbrace{P\ +\ P\ +\ \cdots\ +\ P }_{l個のP}$

<!--
## 楕円離散対数問題
### $lP\ =\ Q$
#### 2点$P, Q$が与えられたとき
#### スカラー倍の$l$を求めること
-->

<!--

## 楕円曲線暗号
- 数学的計算困難性を安全性の根拠としている
- 短い鍵長
- ~~次世代暗号~~
    - RSA暗号から移行が行われている

-->

--
## ペアリング
## (Pairing)

--
## ペアリングとは
- 楕円曲線上で定義される双線形写像
- 2入力1出力
    - 楕円曲線上の2点がある値に変換される
- 双線形性
    - $e(lP, Q) = e(P, lQ)= e(P, Q)^l$

---
## ペアリングを利用した暗号方式はまだ普及していない

---
## 関連研究

--
## IDベース鍵共有

--
## IDベース鍵共有(1/4)
- ID
	- 公開されている
	- メールアドレスや学籍番号など
- 鍵生成センター
    - ID情報を楕円曲線上の点に変換する関数を公開しておく
    - この暗号システムで利用する秘密鍵$s$を設定

--
## IDベース鍵共有(2/4)
- ユーザ Alice, Bob

| パラメータ || Alice |  Bob  |
|:-----------||:-----:|:-----:|
| ID情報     ||$ID_A$ |$ID_B$ |
| 公開鍵     ||$P_A$  |$P_B$  |
| 秘密鍵     ||$S_A$  |$S_B$  |

- $S_A = sP_A, S_B = sP_B$

<!--
- パラメータ
    - ID情報: $ID$
    - 公開鍵: $P$ (<span style="color:red">P</span>ublic key)
    - 秘密鍵: $S$ (<span style="color:red">S</span>ecret key)

## IDベース鍵共有
## のパラメータ
-->

--
## IDベース鍵共有(3/4)
<center>![Block](/home/b1012104/Pictures/Study/presentation/ID-based key sharing.png)</center>

--
## IDベース鍵共有(4/4)
- 正当性
    - $K_\{AB\} = e_n(S_A, P_B) = e_n(sP_A, P_B)\\\\ = e_n(P_A, P_B)^s$
    - $K_\{BA\} = e_n(P_A, S_B) = e_n(P_A, sP_B)\\\\ = e_n(P_A, P_B)^s$

<!--
## IDベース鍵共有(1/3)
- ID情報は公開されているものとする
    - ID情報とはメールアドレスなどを言う
- 鍵生成センターが必要
- ID情報と個人の秘密鍵で鍵を作る

## IDベース鍵共有(2/3)
<center>![Block](/home/b1012104/Pictures/Study/presentation/easy ID-based key sharing.png)</center>

## IDベース鍵共有(3/3)
- $e(S\_A, ID\_B) = K\_{AB}$
- $e(ID\_A, S\_B) = K\_{BA}$
- ID情報のみで鍵共有を行える
-->

---
## 目的
ペアリングを利用した暗号方式の一つである  
IDベース鍵共有システムを実装し,  
実用に耐えうるかどうかの評価を行う

---
## 実装
- C言語
- TEPLA(ペアリングライブラリ)
- idkex
	- ID-based key exchangeから
	- クライアントプログラム
	- 鍵共有を行い鍵を表示する
- idkexd
	サーバプログラム
	- 鍵生成センターの役割

<!--
## TEPLA
- 筑波大学が開発
- 数少ないペアリング演算ライブラリ
    - TEPLA(University of Tsukuba Elliptic Curve and Pairing Library)
    - PBC(Pairing-Based Cryptography Library)
-->

--
## 実装
- 3つのソースに分割
- idkex.c
	- クライアント
	- 鍵生成センターにIDを送信し, 秘密鍵を受け取る
	- 鍵共有を行い鍵を表示する
- idkexd.c
	- 鍵生成センター
	- IDを受け取り, 秘密鍵を計算し(公開鍵のs倍)送り返す
- keys.c
	- 公開鍵, 秘密鍵, マスター鍵を構造体として表す
	- 鍵の初期化や保存, やIDのセットなどの機能

---
## 評価
- 時間
- システム

---
## 時間の評価
- ECDHとの比較
	- Elliptic Curve Diffie-Hellman
	- IDベース鍵共有と同様に楕円曲線を利用した鍵共有法
	- OpenSSLでも採用されているアルゴリズム

--
## ECDH
|楕円曲線名||時間(ミリ秒)|
|:---------||:----------:|
|secp160r1 ||0.60        |
|nistp192  ||0.80        |
|nistp224  ||1.10        |
|nistp256  ||1.50        |
|nistp384  ||3.80        |
|nistp521  ||9.20        |
|nistb163  ||1.10        |
|nistb233  ||2.20        |
|nistb283  ||4.00        |
|nistb409  ||9.60        |
|nistb571  ||22.5        |

--
## IDベース鍵共有
- 秘密鍵を取得済みであることを想定

|処理                        ||時間(ミリ秒)|
|:---------------------------||:----------:|
|公開鍵と秘密鍵の初期化      ||321.1       |
|埋め込み関数                ||7.364       |
|ペアリングとハッシュ値の計算||11.40       |
|全体                        ||337.6       |


--
## 結果
- IDベース鍵共有の方が圧倒的に遅い
	- ECDHの最も遅いものと比較して15倍遅い
	- 一般的な256bitのECDHと比較して225倍遅い
- IDベース鍵共有の支配的な処理は鍵の初期化
	- 初期化を事前に行うことで短縮可能か?
	- 256bitのECDHと比較して12倍遅い
	- ECDHの最も遅いのもと比較して1.2倍速い

---
## システムの評価
- 鍵の漏洩
- 本人認証
- 鍵生成センターの権限

<!--
## 実装
- 楕円曲線や埋め込み関数が固定
	- アルゴリズムの選択の多様性を損なった
-->

--
## 鍵の漏洩
- 鍵漏洩時の対応が困難
- ユーザの秘密鍵
	- IDを変える
	- マスター鍵を変える(大掛かり過ぎる)
- マスター鍵
	- ユーザの秘密鍵も使用不能
	- ユーザに秘密鍵を更新してもらう必要がある

--
## 本人認証
- IDが送られてきた際本人か確かめる必要があるが難しい
	- 実装できず

--
## 鍵生成センターの権限
- 鍵生成センターはすべてのユーザの秘密鍵を計算できる
	- $S_A = s \times P_A$
	- 鍵生成センターの分散方法があるが実装できなかった

---
## 結論
- IDベース鍵共有には処理速度や運用する仕組みに課題がある
	- より良い運用の仕組み
	- 速度が体感的に遅いのか

---
## 今後の展開
- IDベース鍵共有の運用方法の提案
- 実際にIDベース鍵共有を利用した暗号通信を行う

---
## 参考文献
1.  J.A.ブーフマン, "暗号理論入門", シュプリンガー・ジャパン株式会社, 2007
2.  有田正剛, 境隆一, 只木孝太郎, 趙晋輝, 松尾和人, "暗号理論と楕円曲線-数学的土壌に花開く暗号技術-", 森北出版株式会社, 2008

---
## ご清聴ありがとうございました


---
## 楕円曲線
<center>![Block](/home/b1012104/tex/gradrepo/midterm/ec.png)</center>

--
## 楕円曲線の加算
<center>![Block](/home/b1012104/tex/gradrepo/final/ecadd.png)</center>
### $P\ +\ Q\ =\ R$

--
## 楕円曲線のスカラー倍
- 点      : $P$
- スカラー: $l$
- $lP\ =\ \underbrace{P\ +\ P\ +\ \cdots\ +\ P }_{l個のP}$

--
## 楕円離散対数問題
### $lP\ =\ Q$
#### 2点$P, Q$が与えられたとき
#### スカラー倍の$l$を求めること


---
## ペアリングとは
- 楕円曲線上で定義される双線形写像
- 2入力1出力
    - 楕円曲線上の2点が, ある有限体の元に対応する
- 双線形性
    - $e_n(lP, Q) = e_n(P, lQ)= e_n(P, Q)^l$
